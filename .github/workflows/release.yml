name: Build and Release Stable

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    if: contains(toJson(github.event.head_commit.message), 'stable release')
    runs-on: ${{ matrix.runner }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # ---------- Linux (CGO ON + DuckDB) ----------
          - { goos: linux,  goarch: amd64, goversion: "1.23", runner: "ubuntu-24.04",       enable_cgo: true,  duckdb_tag: true }
          - { goos: linux,  goarch: arm64, goversion: "1.23", runner: "ubuntu-24.04-arm64", enable_cgo: true,  duckdb_tag: true }

          # Доп. цель без CGO (32-bit) — без DuckDB
          - { goos: linux,  goarch: 386,   goversion: "1.23", runner: "ubuntu-24.04",       enable_cgo: false, duckdb_tag: false }

          # ---------- macOS (CGO ON + DuckDB) ----------
          - { goos: darwin, goarch: amd64, goversion: "1.23", runner: "macos-13",            enable_cgo: true,  duckdb_tag: true }
          - { goos: darwin, goarch: arm64, goversion: "1.23", runner: "macos-14",            enable_cgo: true,  duckdb_tag: true }

          # ---------- *BSD (CGO OFF, без DuckDB) ----------
          - { goos: freebsd, goarch: amd64, goversion: "1.23", runner: "ubuntu-24.04",       enable_cgo: false, duckdb_tag: false }
          - { goos: openbsd, goarch: amd64, goversion: "1.23", runner: "ubuntu-24.04",       enable_cgo: false, duckdb_tag: false }
          - { goos: netbsd,  goarch: amd64, goversion: "1.23", runner: "ubuntu-24.04",       enable_cgo: false, duckdb_tag: false }

          # ---------- Windows (всегда без DuckDB) ----------
          - { goos: windows, goarch: amd64, goversion: "1.23", runner: "windows-latest",     enable_cgo: false, duckdb_tag: false }
          - { goos: windows, goarch: arm64, goversion: "1.23", runner: "windows-latest",     enable_cgo: false, duckdb_tag: false }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "${{ matrix.goversion }}"
          cache: true
          cache-dependency-path: go.sum

      # подтягиваем именно v2 драйвер
      - name: Sync deps (POSIX)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          go get github.com/marcboeker/go-duckdb/v2@latest
          go mod tidy

      - name: Sync deps (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          go mod tidy

      - name: Print toolchain (POSIX)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO=${{ matrix.enable_cgo }} TAG_DUCKDB=${{ matrix.duckdb_tag }}"
          go env
          gcc --version || true
          g++ --version || true

      - name: Print toolchain (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO=${{ matrix.enable_cgo }} TAG_DUCKDB=${{ matrix.duckdb_tag }}"
          go env

      - name: Build (POSIX)
        if: runner.os != 'Windows'
        shell: bash
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          set -euo pipefail
          VERSION=${{ github.run_number }}
          echo "Building $GOOS/$GOARCH version $VERSION"

          # CGO toggle
          if [ "${{ matrix.enable_cgo }}" = "true" ]; then
            export CGO_ENABLED=1
          else
            export CGO_ENABLED=0
          fi

          # На Linux для C++ рантайма явно линкуем libstdc++
          if [ "$GOOS" = "linux" ] && [ "$CGO_ENABLED" = "1" ]; then
            export CC=gcc
            export CXX=g++
            export CGO_LDFLAGS="-lstdc++"
          fi

          # Build tags
          TAGS="netgo,osusergo"
          if [ "${{ matrix.duckdb_tag }}" = "true" ]; then
            TAGS="$TAGS,duckdb"
          fi

          mkdir -p dist
          BIN_NAME="chicha-isotope-map_${GOOS}_${GOARCH}"
          [ "$GOOS" = "windows" ] && BIN_NAME="${BIN_NAME}.exe"

          GOFLAGS="-trimpath -buildvcs=false" \
          go build -tags "$TAGS" \
                   -ldflags "-s -w -X main.CompileVersion=$VERSION" \
                   -o "dist/${BIN_NAME}"

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          $ErrorActionPreference = "Stop"
          $VERSION = "${{ github.run_number }}"
          Write-Host "Building $env:GOOS/$env:GOARCH version $VERSION"
          $env:CGO_ENABLED = "0"
          $tags = "netgo,osusergo"

          New-Item -Force -ItemType Directory dist | Out-Null
          $bin = "chicha-isotope-map_${{ matrix.goos }}_${{ matrix.goarch }}.exe"

          go build -tags $tags `
                   -ldflags "-s -w -X main.CompileVersion=$VERSION" `
                   -o "dist/$bin"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-raw/

      - name: Publish GitHub Release (tag latest)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          name: "Latest Stable Release"
          prerelease: false
          files: dist-raw/**/*
