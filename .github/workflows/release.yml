name: stable release

on:
  push:
    branches: [ main ]

permissions:
  contents: write

# ---------- PORTABLE: всё без CGO и без DuckDB ----------
jobs:
  build_portable:
    if: contains(toJson(github.event.head_commit.message), 'stable release')
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - { goos: linux,  goarch: amd64, goversion: "1.23", runner: "ubuntu-24.04" }
          - { goos: linux,  goarch: arm64, goversion: "1.23", runner: "ubuntu-24.04" }
          - { goos: linux,  goarch: 386,   goversion: "1.23", runner: "ubuntu-24.04" }
          # macOS
          - { goos: darwin, goarch: amd64, goversion: "1.23", runner: "macos-13" }
          - { goos: darwin, goarch: arm64, goversion: "1.23", runner: "macos-14" }
          # *BSD
          - { goos: freebsd, goarch: amd64, goversion: "1.23", runner: "ubuntu-24.04" }
          - { goos: openbsd, goarch: amd64, goversion: "1.23", runner: "ubuntu-24.04" }
          - { goos: netbsd,  goarch: amd64, goversion: "1.23", runner: "ubuntu-24.04" }
          # Windows
          - { goos: windows, goarch: amd64, goversion: "1.23", runner: "windows-latest" }
          - { goos: windows, goarch: arm64, goversion: "1.23", runner: "windows-latest" }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "${{ matrix.goversion }}"
          cache: true
          cache-dependency-path: go.sum

      - name: go mod tidy (POSIX)
        if: runner.os != 'Windows'
        shell: bash
        run: go mod tidy

      - name: go mod tidy (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: go mod tidy

      - name: Build (POSIX)
        if: runner.os != 'Windows'
        shell: bash
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          set -euo pipefail
          export CGO_ENABLED=0
          VERSION=${{ github.run_number }}
          mkdir -p dist
          BIN="chicha-isotope-map_${GOOS}_${GOARCH}"
          GOFLAGS="-trimpath -buildvcs=false" \
          go build -tags netgo,osusergo \
                   -ldflags "-s -w -X main.CompileVersion=$VERSION" \
                   -o "dist/${BIN}"
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          $ErrorActionPreference = "Stop"
          $env:CGO_ENABLED = "0"
          $version = "${{ github.run_number }}"
          New-Item -Force -ItemType Directory dist | Out-Null
          $bin = "chicha-isotope-map_${{ matrix.goos }}_${{ matrix.goarch }}.exe"
          go build -tags "netgo,osusergo" `
                   -ldflags "-s -w -X main.CompileVersion=$version" `
                   -o "dist/$bin"

      - name: Upload portable artifact
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  # ---------- DUCKDB: только Linux/amd64 и macOS (amd64/arm64), CGO=1, тег duckdb ----------
  build_duckdb:
    if: contains(toJson(github.event.head_commit.message), 'stable release')
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux/amd64: Debian 10 (glibc 2.28) в контейнере + статическая libstdc++/libgcc
          - { target: linux_amd64_duckdb, goos: linux, goarch: amd64, goversion: "1.23", runner: "ubuntu-24.04", in_container: true }
          # macOS amd64/arm64: нативно
          - { target: darwin_amd64_duckdb, goos: darwin, goarch: amd64, goversion: "1.23", runner: "macos-13", in_container: false }
          - { target: darwin_arm64_duckdb, goos: darwin, goarch: arm64, goversion: "1.23", runner: "macos-14", in_container: false }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Linux/amd64 в контейнере Debian 10 (glibc 2.28), архивные репы ---
      - name: Build linux/amd64 (duckdb) in Debian 10 container (archive repos)
        if: matrix.in_container == true
        uses: addnab/docker-run-action@v3
        with:
          image: debian:buster
          options: -v ${{ github.workspace }}:/work -w /work
          run: |
            # Безопасный heredoc: YAML не ломаем, bash получает скрипт из stdin
            bash -eo pipefail -s <<'BASH'
            set -euo pipefail
            export DEBIAN_FRONTEND=noninteractive

            # Переключаем apt на архивные репозитории buster
            cat >/etc/apt/sources.list <<'EOF'
deb http://archive.debian.org/debian buster main contrib non-free
deb http://archive.debian.org/debian-security buster/updates main contrib non-free
EOF
            printf 'Acquire::Check-Valid-Until "false";\n' >/etc/apt/apt.conf.d/99archive

            apt-get -o Acquire::Check-Valid-Until=false update
            apt-get install -y --no-install-recommends ca-certificates curl build-essential git bash

            # Go 1.23
            curl -fsSL https://go.dev/dl/go1.23.linux-amd64.tar.gz | tar -C /usr/local -xz
            export PATH=/usr/local/go/bin:$PATH
            go version

            # Вытягиваем go-duckdb v2 (libduckdb вшивается драйвером)
            go get github.com/marcboeker/go-duckdb/v2@latest
            go mod tidy

            # CGO + статически подлинковать libstdc++/libgcc (glibc buster остаётся динамич.)
            export GOOS=linux GOARCH=amd64
            export CGO_ENABLED=1
            export CC=gcc
            export CXX=g++
            export CGO_LDFLAGS='-static-libstdc++ -static-libgcc'

            mkdir -p dist
            TAGS='netgo,osusergo,duckdb'
            go build -tags "$TAGS" \
                     -ldflags "-s -w -X main.CompileVersion=${GITHUB_RUN_NUMBER}" \
                     -o dist/chicha-isotope-map_linux_amd64_duckdb
            BASH

      # --- macOS нативно ---
      - name: Set up Go (macOS)
        if: matrix.in_container == false
        uses: actions/setup-go@v5
        with:
          go-version: "${{ matrix.goversion }}"
          cache: true
          cache-dependency-path: go.sum

      - name: go mod tidy (macOS)
        if: matrix.in_container == false
        shell: bash
        run: |
          go get github.com/marcboeker/go-duckdb/v2@latest
          go mod tidy

      - name: Build (macOS duckdb)
        if: matrix.in_container == false
        shell: bash
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          set -euo pipefail
          export CGO_ENABLED=1
          VERSION=${{ github.run_number }}
          mkdir -p dist
          BIN="chicha-isotope-map_${GOOS}_${GOARCH}_duckdb"
          GOFLAGS="-trimpath -buildvcs=false" \
          go build -tags "netgo,osusergo,duckdb" \
                   -ldflags "-s -w -X main.CompileVersion=$VERSION" \
                   -o "dist/${BIN}"

      - name: Upload duckdb artifact
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.target }}
          path: dist/

  release:
    needs: [build_portable, build_duckdb]
    runs-on: ubuntu-24.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-raw/

      - name: Publish GitHub Release (tag latest)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          name: "Latest stable release"
          prerelease: false
          files: dist-raw/**/*

